#version 430

layout(triangles, equal_spacing, cw) in;

#include <shader/schwarzschild.glsl>

uniform mat4 projMX;
uniform mat4 viewMX;
uniform mat4 obsCamViewMX;
uniform mat4 modelMX;
uniform vec3 obsCamPos;
uniform vec3 main_e2;

uniform float imageOrder;

in vec3 normalTC[];
in vec2 texCoordsTC[];

out vec3 tPosition;
out vec3 tNormal;
out vec2 tTexCoords;
out vec3 tPosScreenSpace;


void main() {
    vec4 va = gl_TessCoord.x * gl_in[0].gl_Position;
    vec4 vb = gl_TessCoord.y * gl_in[1].gl_Position;
    vec4 vc = gl_TessCoord.z * gl_in[2].gl_Position;

    vec4 vert = vec4(va.xyz + vb.xyz + vc.xyz, 1.0);
    tPosition = vert.xyz;
    tPosScreenSpace = (projMX * obsCamViewMX * vert).xyz;

    vert = vec4(calcApparentPos(obsCamPos, vert.xyz, imageOrder, 0.8), 1.0);

    vec3 na = gl_TessCoord.x * normalTC[0];
    vec3 nb = gl_TessCoord.y * normalTC[1];
    vec3 nc = gl_TessCoord.z * normalTC[2];

    vec3 transNormal = na + nb + nc;
    tNormal = normalize(transNormal);

    vec2 ta = gl_TessCoord.x * texCoordsTC[0];
    vec2 tb = gl_TessCoord.y * texCoordsTC[1];
    vec2 tc = gl_TessCoord.z * texCoordsTC[2];
    tTexCoords = ta + tb + tc;

    gl_Position = projMX * viewMX * vert;
}
